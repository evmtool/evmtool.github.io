"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9720],{62546:function(e,n,a){a.r(n);a(51877);var t=a(87659),r=a(38345),s=a(62435),l=a(30837),o=a(96988),d=a(34041),i=a(54442),u=a(42628),c=a(86074);l.Z.registerLanguage("solidity",o.solidity);n.default=function(){var e=(0,i.useDispatch)(),n=(0,i.useSelector)((function(e){return e.interface.ifTheme})),a=(0,i.useIntl)().formatMessage({id:"interface.IfTheme"}),o=(0,s.useCallback)((function(n){localStorage.setItem("ifTheme",JSON.stringify(n)),e(u.N.setIfTheme(n))}),[e]);return(0,s.useEffect)((function(){l.Z.highlightAll()}),[l.Z]),(0,c.jsxs)(t._z,{className:"interface",ghost:!0,children:[(0,c.jsx)("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.7.0/build/styles/".concat(n,".min.css")}),(0,c.jsx)(r.Z,{title:"IERC1155",subTitle:(0,c.jsxs)("div",{children:[(0,c.jsx)("span",{className:"ml-2 mr-2",children:a}),(0,c.jsx)(d.Z,{style:{width:200},defaultValue:n,onChange:o,options:[{value:"a11y-dark",label:"a11y-dark"},{value:"a11y-light",label:"a11y-light"},{value:"agate",label:"agate"},{value:"an-old-hope",label:"an-old-hope"},{value:"androidstudio",label:"androidstudio"},{value:"arduino-light",label:"arduino-light"},{value:"arta",label:"arta"},{value:"ascetic",label:"ascetic"},{value:"atom-one-dark-reasonable",label:"atom-one-dark-reasonable"},{value:"atom-one-dark",label:"atom-one-dark"},{value:"atom-one-light",label:"atom-one-light"},{value:"brown-paper",label:"brown-paper"},{value:"codepen-embed",label:"codepen-embed"},{value:"color-brewer",label:"color-brewer"},{value:"dark",label:"dark"},{value:"default",label:"default"},{value:"devibeans",label:"devibeans"},{value:"docco",label:"docco"},{value:"far",label:"far"},{value:"felipec",label:"felipec"},{value:"foundation",label:"foundation"},{value:"github-dark-dimmed",label:"github-dark-dimmed"},{value:"github-dark",label:"github-dark"},{value:"github",label:"github"},{value:"gml",label:"gml"},{value:"googlecode",label:"googlecode"},{value:"gradient-dark",label:"gradient-dark"},{value:"gradient-light",label:"gradient-light"},{value:"grayscale",label:"grayscale"},{value:"hybrid",label:"hybrid"},{value:"idea",label:"idea"},{value:"intellij-light",label:"intellij-light"},{value:"ir-black",label:"ir-black"},{value:"isbl-editor-dark",label:"isbl-editor-dark"},{value:"isbl-editor-light",label:"isbl-editor-light"},{value:"kimbie-dark",label:"kimbie-dark"},{value:"kimbie-light",label:"kimbie-light"},{value:"lightfair",label:"lightfair"},{value:"lioshi",label:"lioshi"},{value:"magula",label:"magula"},{value:"mono-blue",label:"mono-blue"},{value:"monokai-sublime",label:"monokai-sublime"},{value:"monokai",label:"monokai"},{value:"night-owl",label:"night-owl"},{value:"nnfx-dark",label:"nnfx-dark"},{value:"nnfx-light",label:"nnfx-light"},{value:"nord",label:"nord"},{value:"obsidian",label:"obsidian"},{value:"panda-syntax-dark",label:"panda-syntax-dark"},{value:"panda-syntax-light",label:"panda-syntax-light"},{value:"paraiso-dark",label:"paraiso-dark"},{value:"paraiso-light",label:"paraiso-light"},{value:"pojoaque",label:"pojoaque"},{value:"purebasic",label:"purebasic"},{value:"qtcreator-dark",label:"qtcreator-dark"},{value:"qtcreator-light",label:"qtcreator-light"},{value:"rainbow",label:"rainbow"},{value:"routeros",label:"routeros"},{value:"school-book",label:"school-book"},{value:"shades-of-purple",label:"shades-of-purple"},{value:"srcery",label:"srcery"},{value:"stackoverflow-dark",label:"stackoverflow-dark"},{value:"stackoverflow-light",label:"stackoverflow-light"},{value:"sunburst",label:"sunburst"},{value:"tokyo-night-dark",label:"tokyo-night-dark"},{value:"tokyo-night-light",label:"tokyo-night-light"},{value:"tomorrow-night-blue",label:"tomorrow-night-blue"},{value:"tomorrow-night-bright",label:"tomorrow-night-bright"},{value:"vs",label:"vs"},{value:"vs2015",label:"vs2015"},{value:"xcode",label:"xcode"},{value:"xt256",label:"xt256"}]})]}),children:(0,c.jsx)("pre",{children:(0,c.jsx)("code",{children:'\nconst fullHumanReadableABI = \n[\n  "event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)",\n  "event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)",\n  "event ApprovalForAll(address indexed account, address indexed operator, bool approved)",\n  "event URI(string value, uint256 indexed id)",\n  "function balanceOf(address account, uint256 id) view returns (uint256)",\n  "function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])",\n  "function setApprovalForAll(address operator, bool approved)",\n  "function isApprovedForAll(address account, address operator) view returns (bool)",\n  "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data)",\n  "function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data)"\n]\n\nconst minimalHumanReadableABI = \n[\n  "event TransferSingle(address indexed,address indexed,address indexed,uint256,uint256)",\n  "event TransferBatch(address indexed,address indexed,address indexed,uint256[],uint256[])",\n  "event ApprovalForAll(address indexed,address indexed,bool)",\n  "event URI(string,uint256 indexed)",\n  "function balanceOf(address,uint256) view returns (uint256)",\n  "function balanceOfBatch(address[],uint256[]) view returns (uint256[])",\n  "function setApprovalForAll(address,bool)",\n  "function isApprovedForAll(address,address) view returns (bool)",\n  "function safeTransferFrom(address,address,uint256,uint256,bytes)",\n  "function safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"\n]\n\nconst methodId = [\n[\n  "event TransferSingle(address indexed,address indexed,address indexed,uint256,uint256)",\n  "0xc3d58168",\n\n  "event TransferBatch(address indexed,address indexed,address indexed,uint256[],uint256[])",\n  "0x4a39dc06",\n\n  "event ApprovalForAll(address indexed,address indexed,bool)",\n  "0x17307eab",\n\n  "event URI(string,uint256 indexed)",\n  "0x6bb7ff70",\n\n  "function balanceOf(address,uint256) view returns (uint256)",\n  "0x00fdd58e",\n\n  "function balanceOfBatch(address[],uint256[]) view returns (uint256[])",\n  "0x4e1273f4",\n\n  "function setApprovalForAll(address,bool)",\n  "0xa22cb465",\n\n  "function isApprovedForAll(address,address) view returns (bool)",\n  "0xe985e9c5",\n\n  "function safeTransferFrom(address,address,uint256,uint256,bytes)",\n  "0xf242432a",\n\n  "function safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",\n  "0x2eb2c2d6"\n]\n\ninterface IERC1155 \n{\n  /**\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n   */\n  event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n  /**\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n   * transfers.\n   */\n  event TransferBatch(\n      address indexed operator,\n      address indexed from,\n      address indexed to,\n      uint256[] ids,\n      uint256[] values\n  );\n\n  /**\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n   * `approved`.\n   */\n  event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n  /**\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n   *\n   * If an {URI} event was emitted for `id`, the standard\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n   * returned by {IERC1155MetadataURI-uri}.\n   */\n  event URI(string value, uint256 indexed id);\n\n  /**\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function balanceOf(address account, uint256 id) external view returns (uint256);\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n   *\n   * Requirements:\n   *\n   * - `accounts` and `ids` must have the same length.\n   */\n  function balanceOfBatch(\n      address[] calldata accounts,\n      uint256[] calldata ids\n  ) external view returns (uint256[] memory);\n\n  /**\n   * @dev Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`,\n   *\n   * Emits an {ApprovalForAll} event.\n   *\n   * Requirements:\n   *\n   * - `operator` cannot be the caller.\n   */\n  function setApprovalForAll(address operator, bool approved) external;\n\n  /**\n   * @dev Returns true if `operator` is approved to transfer ``account``\'s tokens.\n   *\n   * See {setApprovalForAll}.\n   */\n  function isApprovedForAll(address account, address operator) external view returns (bool);\n\n  /**\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n   *\n   * Emits a {TransferSingle} event.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - If the caller is not `from`, it must have been approved to spend ``from``\'s tokens via {setApprovalForAll}.\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n   * acceptance magic value.\n   */\n  function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n  /**\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n   *\n   * Emits a {TransferBatch} event.\n   *\n   * Requirements:\n   *\n   * - `ids` and `amounts` must have the same length.\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n   * acceptance magic value.\n   */\n  function safeBatchTransferFrom(\n      address from,\n      address to,\n      uint256[] calldata ids,\n      uint256[] calldata amounts,\n      bytes calldata data\n  ) external;\n\n  /**\n   * @dev Returns the URI for token type `id`.\n   *\n   * If the `id` substring is present in the URI, it must be replaced by\n   * clients with the actual token type ID.\n   */\n  function uri(uint256 id) external view returns (string memory);\n}\n\nconst jsonABI = \n[\n  {\n    "type": "event",\n    "anonymous": false,\n    "name": "TransferSingle",\n    "inputs": [\n      {\n        "type": "address",\n        "name": "operator",\n        "indexed": true\n      },\n      {\n        "type": "address",\n        "name": "from",\n        "indexed": true\n      },\n      {\n        "type": "address",\n        "name": "to",\n        "indexed": true\n      },\n      {\n        "type": "uint256",\n        "name": "id"\n      },\n      {\n        "type": "uint256",\n        "name": "value"\n      }\n    ]\n  },\n  {\n    "type": "event",\n    "anonymous": false,\n    "name": "TransferBatch",\n    "inputs": [\n      {\n        "type": "address",\n        "name": "operator",\n        "indexed": true\n      },\n      {\n        "type": "address",\n        "name": "from",\n        "indexed": true\n      },\n      {\n        "type": "address",\n        "name": "to",\n        "indexed": true\n      },\n      {\n        "type": "uint256[]",\n        "name": "ids"\n      },\n      {\n        "type": "uint256[]",\n        "name": "values"\n      }\n    ]\n  },\n  {\n    "type": "event",\n    "anonymous": false,\n    "name": "ApprovalForAll",\n    "inputs": [\n      {\n        "type": "address",\n        "name": "account",\n        "indexed": true\n      },\n      {\n        "type": "address",\n        "name": "operator",\n        "indexed": true\n      },\n      {\n        "type": "bool",\n        "name": "approved"\n      }\n    ]\n  },\n  {\n    "type": "event",\n    "anonymous": false,\n    "name": "URI",\n    "inputs": [\n      {\n        "type": "string",\n        "name": "value"\n      },\n      {\n        "type": "uint256",\n        "name": "id",\n        "indexed": true\n      }\n    ]\n  },\n  {\n    "type": "function",\n    "name": "balanceOf",\n    "constant": true,\n    "stateMutability": "view",\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address",\n        "name": "account"\n      },\n      {\n        "type": "uint256",\n        "name": "id"\n      }\n    ],\n    "outputs": [\n      {\n        "type": "uint256"\n      }\n    ]\n  },\n  {\n    "type": "function",\n    "name": "balanceOfBatch",\n    "constant": true,\n    "stateMutability": "view",\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address[]",\n        "name": "accounts"\n      },\n      {\n        "type": "uint256[]",\n        "name": "ids"\n      }\n    ],\n    "outputs": [\n      {\n        "type": "uint256[]"\n      }\n    ]\n  },\n  {\n    "type": "function",\n    "name": "setApprovalForAll",\n    "constant": false,\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address",\n        "name": "operator"\n      },\n      {\n        "type": "bool",\n        "name": "approved"\n      }\n    ],\n    "outputs": []\n  },\n  {\n    "type": "function",\n    "name": "isApprovedForAll",\n    "constant": true,\n    "stateMutability": "view",\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address",\n        "name": "account"\n      },\n      {\n        "type": "address",\n        "name": "operator"\n      }\n    ],\n    "outputs": [\n      {\n        "type": "bool"\n      }\n    ]\n  },\n  {\n    "type": "function",\n    "name": "safeTransferFrom",\n    "constant": false,\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address",\n        "name": "from"\n      },\n      {\n        "type": "address",\n        "name": "to"\n      },\n      {\n        "type": "uint256",\n        "name": "id"\n      },\n      {\n        "type": "uint256",\n        "name": "amount"\n      },\n      {\n        "type": "bytes",\n        "name": "data"\n      }\n    ],\n    "outputs": []\n  },\n  {\n    "type": "function",\n    "name": "safeBatchTransferFrom",\n    "constant": false,\n    "payable": false,\n    "inputs": [\n      {\n        "type": "address",\n        "name": "from"\n      },\n      {\n        "type": "address",\n        "name": "to"\n      },\n      {\n        "type": "uint256[]",\n        "name": "ids"\n      },\n      {\n        "type": "uint256[]",\n        "name": "amounts"\n      },\n      {\n        "type": "bytes",\n        "name": "data"\n      }\n    ],\n    "outputs": []\n  }\n]  \n'})})})]})}},51877:function(){}}]);